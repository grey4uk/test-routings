{"version":3,"file":"static/js/111.53f60e9f.chunk.js","mappings":"yPAMMA,EAAcC,EAAAA,GAAW,CAC7BC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,EAAAA,KACPI,IAAI,EAAG,6CACPC,QAAQ,WAAY,mDACpBH,SAAS,cAGDI,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEZ,MAAO,GAAIE,SAAU,IACtCW,iBAAkBf,EAClBgB,SAAU,SAACC,EAAQC,GACjBV,GAASW,EAAAA,EAAAA,IAASF,IAClBC,EAAQE,WACV,EAAET,UAEFD,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CAACC,aAAa,MAAKX,SAAA,EACtBD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAACW,EAAAA,GAAK,CAACC,KAAK,QAAQC,KAAK,QAAQC,YAAY,oBAC7Cd,EAAAA,EAAAA,KAACe,EAAAA,GAAY,CAACF,KAAK,QAAQG,UAAU,aAEvClB,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACW,EAAAA,GAAK,CAACC,KAAK,WAAWC,KAAK,WAAWC,YAAY,cACnDd,EAAAA,EAAAA,KAACe,EAAAA,GAAY,CAACF,KAAK,WAAWG,UAAU,aAE1ChB,EAAAA,EAAAA,KAAA,UAAQY,KAAK,SAAQb,SAAC,iBAI1BD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,uCAEDC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,YAAWnB,SAAC,mBAI7B,ECrCA,EATc,WACZ,OACED,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,WACPC,EAAAA,EAAAA,KAACL,EAAS,MAGhB,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { register } from 'redux/auth/authOperations';\nimport * as Yup from 'yup';\n\nconst LogInScheme = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(8, 'Password must contain 8 characters as min')\n    .matches(/[a-zA-Z]/, 'Password must contain at least one Latin letter')\n    .required('Required'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <h2>Log In form</h2>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={LogInScheme}\n        onSubmit={(values, actions) => {\n          dispatch(register(values));\n          actions.resetForm();\n        }}\n      >\n        <Form autoComplete=\"off\">\n          <label>\n            Email\n            <Field type=\"email\" name=\"email\" placeholder=\"john@gmail.com\" />\n            <ErrorMessage name=\"email\" component=\"span\" />\n          </label>\n          <label>\n            <Field type=\"password\" name=\"password\" placeholder=\"********\" />\n            <ErrorMessage name=\"password\" component=\"span\" />\n          </label>\n          <button type=\"submit\">Log In</button>\n        </Form>\n      </Formik>\n\n      <p>\n        Is it your first time here? Please,\n        <Link to=\"/register\">Register!</Link>\n      </p>\n    </div>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <div>\n      <title>Login</title>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["LogInScheme","Yup","email","required","password","min","matches","LoginForm","dispatch","useDispatch","_jsxs","children","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","Form","autoComplete","Field","type","name","placeholder","ErrorMessage","component","Link","to"],"sourceRoot":""}